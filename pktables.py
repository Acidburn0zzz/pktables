#!/usr/bin/env python

import packet 
import httplib, json
import time
import os, sys, argparse, collections
from netaddr import IPNetwork, IPAddress

if not "PACKETKEY" in os.environ:
	raise RuntimeError("PACKETKEY variable not set")

if not "PROJECTID" in os.environ:
	raise RuntimeError("PROJECTID variable not set")

PACKETKEY=os.environ.get('PACKETKEY')
PROJECTID=os.environ.get('PROJECTID')
RULESFILE=os.environ.get('RULESFILE', '/data/pktables.rules')

manager = packet.Manager(auth_token=PACKETKEY)

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='Update iptables from Packet Production Project.')
	parser.add_argument('--dry-run', dest='dryrun', action="store_true", help='do not apply the changes, only display the rules that will be applied')
	args = parser.parse_args()

	networks = {}
	data = manager.call_api('projects/%s/ips' % PROJECTID)
	for block in data['ip_addresses']:
		if not block['management'] and block['address_family']==4:
			networks[block['network']] = IPNetwork(block['network'] +'/'+ str(block['cidr']))

	perpage = 50
	ds = manager.list_devices(PROJECTID, {'per_page': perpage})
	if perpage <= manager.meta['total']:
		raise RuntimeError("more devices than requested: "+ str(manager.meta['total']))

	orphans = {}
	for d in ds:
		for ip in d.ip_addresses:
			if ip['address_family']==4:
				public = 'Public' if ip['public'] else 'Private'
				print('checking '+ ip['address'])
				match = False
				for k,network in networks.iteritems():
					if IPAddress(ip['address']) in network:
						print(ip['address'] +' is in network '+ str(network.cidr))
						match = True
						break
				if not match:
						orphans[ip['address']] = 'iptables -A PACKETPROD -s '+ ip['address'] +' -p tcp -j ACCEPT -m comment --comment "'+ d.hostname +' '+ public +' v'+ str(ip['address_family']) +'"'


	if args.dryrun:
		print "<< dry run >>"
		print("iptables -F PACKETPROD")
		for k,network in sorted(networks.iteritems()):
			print("iptables -A PACKETPROD -s "+ str(network.cidr) +" -p tcp -j ACCEPT")
		for k,v in sorted(orphans.iteritems()):
			print v
		print("iptables -A PACKETPROD -j RETURN")
	else:
		print("writing rules to "+ RULESFILE)
		target = open(RULESFILE, 'w')
		target.truncate()
		target.write('# Generated by pktables v1.0.00 on '+ time.strftime("%a %b %d %H:%M:%S %Y") +"\n")
		target.write("iptables -F PACKETPROD\n")
		for k,network in sorted(networks.iteritems()):
			target.write("iptables -A PACKETPROD -s "+ str(network.cidr) +" -p tcp -j ACCEPT\n")
		for k,v in sorted(orphans.iteritems()):
			target.write(v)
			target.write("\n")
		target.write("iptables -A PACKETPROD -j RETURN\n")

		target.close()
